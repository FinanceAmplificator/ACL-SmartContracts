/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IbMxxIncentivesControllerInterface extends ethers.utils.Interface {
  functions: {
    "handleAction(address,uint256,uint256)": FunctionFragment;
    "getRewardsBalance(address[],address)": FunctionFragment;
    "claimRewards(address[],uint256,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "handleAction",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsBalance",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string[], BigNumberish, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "handleAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;

  events: {};
}

export class IbMxxIncentivesController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IbMxxIncentivesControllerInterface;

  functions: {
    handleAction(
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      stake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  handleAction(
    asset: string,
    userBalance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRewardsBalance(
    assets: string[],
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    assets: string[],
    amount: BigNumberish,
    to: string,
    stake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    handleAction(
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    getRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      stake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    handleAction(
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<BigNumber>;
    getRewardsBalance(assets: string[], user: string): Promise<BigNumber>;
    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      stake: boolean
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    handleAction(
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<PopulatedTransaction>;
    getRewardsBalance(
      assets: string[],
      user: string
    ): Promise<PopulatedTransaction>;
    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      stake: boolean
    ): Promise<PopulatedTransaction>;
  };
}
