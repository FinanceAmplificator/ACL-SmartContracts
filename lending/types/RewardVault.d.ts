/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardVaultInterface extends ethers.utils.Interface {
  functions: {
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardManager()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setRewardManager(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "emergencyWithdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isOwner", values?: void): string;
  encodeFunctionData(functionFragment: "owner", values?: void): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "rewardManager", values?: void): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class RewardVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardVaultInterface;

  functions: {
    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    rewardManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will set the Reward Manager.
     * @param _rewardManager - The reward manager to set. Access Control: Owner Only.
     */
    setRewardManager(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will allow the Reward Manager to withdraw a token.
     * @param _amount - The amount to pay. Access Control: Reward Manager Only.
     * @param _to - The payee's address.
     * @param _token - The token to withdraw.
     */
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will set emergency Pause.
     * @param _pause - Set Pause, Unpause. Access Control: Only Owner
     */
    setPaused(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will allow admin owner to withdraw in case of emergency. The admin owner is a multi-Signature address.
     * @param _amount - The amount to pay. Access Control: Only Owner
     * @param _to - The payee's address.
     * @param _token - The token to withdraw.
     */
    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will set the Reward Manager.
   * @param _rewardManager - The reward manager to set. Access Control: Owner Only.
   */
  setRewardManager(
    _rewardManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will allow the Reward Manager to withdraw a token.
   * @param _amount - The amount to pay. Access Control: Reward Manager Only.
   * @param _to - The payee's address.
   * @param _token - The token to withdraw.
   */
  withdraw(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will set emergency Pause.
   * @param _pause - Set Pause, Unpause. Access Control: Only Owner
   */
  setPaused(
    _pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will allow admin owner to withdraw in case of emergency. The admin owner is a multi-Signature address.
   * @param _amount - The amount to pay. Access Control: Only Owner
   * @param _to - The payee's address.
   * @param _token - The token to withdraw.
   */
  emergencyWithdraw(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<void>;

    /**
     * This function will set the Reward Manager.
     * @param _rewardManager - The reward manager to set. Access Control: Owner Only.
     */
    setRewardManager(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * This function will allow the Reward Manager to withdraw a token.
     * @param _amount - The amount to pay. Access Control: Reward Manager Only.
     * @param _to - The payee's address.
     * @param _token - The token to withdraw.
     */
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * This function will set emergency Pause.
     * @param _pause - Set Pause, Unpause. Access Control: Only Owner
     */
    setPaused(_pause: boolean, overrides?: Overrides): Promise<void>;

    /**
     * This function will allow admin owner to withdraw in case of emergency. The admin owner is a multi-Signature address.
     * @param _amount - The amount to pay. Access Control: Only Owner
     * @param _to - The payee's address.
     * @param _token - The token to withdraw.
     */
    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    isOwner(): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    renounceOwnership(): Promise<BigNumber>;
    rewardManager(): Promise<BigNumber>;
    transferOwnership(newOwner: string): Promise<BigNumber>;
    setRewardManager(_rewardManager: string): Promise<BigNumber>;
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;
    setPaused(_pause: boolean): Promise<BigNumber>;
    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isOwner(): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    renounceOwnership(): Promise<PopulatedTransaction>;
    rewardManager(): Promise<PopulatedTransaction>;
    transferOwnership(newOwner: string): Promise<PopulatedTransaction>;
    setRewardManager(_rewardManager: string): Promise<PopulatedTransaction>;
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    setPaused(_pause: boolean): Promise<PopulatedTransaction>;
    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
