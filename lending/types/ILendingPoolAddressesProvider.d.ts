/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ILendingPoolAddressesProviderInterface
  extends ethers.utils.Interface {
  functions: {
    "getLendingPool()": FunctionFragment;
    "setLendingPoolImpl(address)": FunctionFragment;
    "getLendingPoolCore()": FunctionFragment;
    "setLendingPoolCoreImpl(address)": FunctionFragment;
    "getLendingPoolConfigurator()": FunctionFragment;
    "setLendingPoolConfiguratorImpl(address)": FunctionFragment;
    "getLendingPoolDataProvider()": FunctionFragment;
    "setLendingPoolDataProviderImpl(address)": FunctionFragment;
    "getLendingPoolParametersProvider()": FunctionFragment;
    "setLendingPoolParametersProvider(address)": FunctionFragment;
    "getFeeProvider()": FunctionFragment;
    "setFeeProviderImpl(address)": FunctionFragment;
    "getLendingPoolLiquidationManager()": FunctionFragment;
    "setLendingPoolLiquidationManager(address)": FunctionFragment;
    "getLendingPoolManager()": FunctionFragment;
    "setLendingPoolManager(address)": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "getLendingRateOracle()": FunctionFragment;
    "setLendingRateOracle(address)": FunctionFragment;
    "getRewardManager()": FunctionFragment;
    "setRewardManager(address)": FunctionFragment;
    "getLpRewardVault()": FunctionFragment;
    "setLpRewardVault(address)": FunctionFragment;
    "getGovRewardVault()": FunctionFragment;
    "setGovRewardVault(address)": FunctionFragment;
    "getSafetyRewardVault()": FunctionFragment;
    "setSafetyRewardVault(address)": FunctionFragment;
    "getStakingToken()": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getLendingPool", values?: void): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolCore",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolCoreImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolConfigurator",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolConfiguratorImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolDataProvider",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolDataProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolParametersProvider",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolParametersProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getFeeProvider", values?: void): string;
  encodeFunctionData(
    functionFragment: "setFeeProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolLiquidationManager",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolLiquidationManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolManager",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPriceOracle", values?: void): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingRateOracle",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingRateOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardManager",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpRewardVault",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setLpRewardVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovRewardVault",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setGovRewardVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSafetyRewardVault",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setSafetyRewardVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingToken",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolCoreImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolConfiguratorImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolDataProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolParametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolParametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolLiquidationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolLiquidationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSafetyRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafetyRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class ILendingPoolAddressesProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ILendingPoolAddressesProviderInterface;

  functions: {
    getLendingPool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolImpl(
      _pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingPoolCore(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingPoolConfigurator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingPoolDataProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolParametersProvider(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getFeeProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingPoolManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPriceOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingRateOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRewardManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setRewardManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLpRewardVault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLpRewardVault(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getGovRewardVault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setGovRewardVault(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSafetyRewardVault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setSafetyRewardVault(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getStakingToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setStakingToken(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getLendingPool(overrides?: CallOverrides): Promise<string>;

  setLendingPoolImpl(
    _pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingPoolCore(overrides?: CallOverrides): Promise<string>;

  setLendingPoolCoreImpl(
    _lendingPoolCore: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

  setLendingPoolConfiguratorImpl(
    _configurator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingPoolDataProvider(overrides?: CallOverrides): Promise<string>;

  setLendingPoolDataProviderImpl(
    _provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingPoolParametersProvider(overrides?: CallOverrides): Promise<string>;

  setLendingPoolParametersProvider(
    _parametersProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getFeeProvider(overrides?: CallOverrides): Promise<string>;

  setFeeProviderImpl(
    _feeProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingPoolLiquidationManager(overrides?: CallOverrides): Promise<string>;

  setLendingPoolLiquidationManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingPoolManager(overrides?: CallOverrides): Promise<string>;

  setLendingPoolManager(
    _lendingPoolManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  setPriceOracle(
    _priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

  setLendingRateOracle(
    _lendingRateOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRewardManager(overrides?: CallOverrides): Promise<string>;

  setRewardManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLpRewardVault(overrides?: CallOverrides): Promise<string>;

  setLpRewardVault(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getGovRewardVault(overrides?: CallOverrides): Promise<string>;

  setGovRewardVault(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSafetyRewardVault(overrides?: CallOverrides): Promise<string>;

  setSafetyRewardVault(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getStakingToken(overrides?: CallOverrides): Promise<string>;

  setStakingToken(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    getLendingPool(overrides?: CallOverrides): Promise<string>;

    setLendingPoolImpl(_pool: string, overrides?: Overrides): Promise<void>;

    getLendingPoolCore(overrides?: CallOverrides): Promise<string>;

    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<void>;

    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides
    ): Promise<void>;

    getLendingPoolDataProvider(overrides?: CallOverrides): Promise<string>;

    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides
    ): Promise<void>;

    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<string>;

    setLendingPoolParametersProvider(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<void>;

    getFeeProvider(overrides?: CallOverrides): Promise<string>;

    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<void>;

    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<string>;

    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<void>;

    getLendingPoolManager(overrides?: CallOverrides): Promise<string>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<void>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    setPriceOracle(_priceOracle: string, overrides?: Overrides): Promise<void>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<void>;

    getRewardManager(overrides?: CallOverrides): Promise<string>;

    setRewardManager(_manager: string, overrides?: Overrides): Promise<void>;

    getLpRewardVault(overrides?: CallOverrides): Promise<string>;

    setLpRewardVault(_address: string, overrides?: Overrides): Promise<void>;

    getGovRewardVault(overrides?: CallOverrides): Promise<string>;

    setGovRewardVault(_address: string, overrides?: Overrides): Promise<void>;

    getSafetyRewardVault(overrides?: CallOverrides): Promise<string>;

    setSafetyRewardVault(
      _address: string,
      overrides?: Overrides
    ): Promise<void>;

    getStakingToken(overrides?: CallOverrides): Promise<string>;

    setStakingToken(_address: string, overrides?: Overrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getLendingPool(): Promise<BigNumber>;
    setLendingPoolImpl(_pool: string): Promise<BigNumber>;
    getLendingPoolCore(): Promise<BigNumber>;
    setLendingPoolCoreImpl(_lendingPoolCore: string): Promise<BigNumber>;
    getLendingPoolConfigurator(): Promise<BigNumber>;
    setLendingPoolConfiguratorImpl(_configurator: string): Promise<BigNumber>;
    getLendingPoolDataProvider(): Promise<BigNumber>;
    setLendingPoolDataProviderImpl(_provider: string): Promise<BigNumber>;
    getLendingPoolParametersProvider(): Promise<BigNumber>;
    setLendingPoolParametersProvider(
      _parametersProvider: string
    ): Promise<BigNumber>;
    getFeeProvider(): Promise<BigNumber>;
    setFeeProviderImpl(_feeProvider: string): Promise<BigNumber>;
    getLendingPoolLiquidationManager(): Promise<BigNumber>;
    setLendingPoolLiquidationManager(_manager: string): Promise<BigNumber>;
    getLendingPoolManager(): Promise<BigNumber>;
    setLendingPoolManager(_lendingPoolManager: string): Promise<BigNumber>;
    getPriceOracle(): Promise<BigNumber>;
    setPriceOracle(_priceOracle: string): Promise<BigNumber>;
    getLendingRateOracle(): Promise<BigNumber>;
    setLendingRateOracle(_lendingRateOracle: string): Promise<BigNumber>;
    getRewardManager(): Promise<BigNumber>;
    setRewardManager(_manager: string): Promise<BigNumber>;
    getLpRewardVault(): Promise<BigNumber>;
    setLpRewardVault(_address: string): Promise<BigNumber>;
    getGovRewardVault(): Promise<BigNumber>;
    setGovRewardVault(_address: string): Promise<BigNumber>;
    getSafetyRewardVault(): Promise<BigNumber>;
    setSafetyRewardVault(_address: string): Promise<BigNumber>;
    getStakingToken(): Promise<BigNumber>;
    setStakingToken(_address: string): Promise<BigNumber>;
  };

  populateTransaction: {
    getLendingPool(): Promise<PopulatedTransaction>;
    setLendingPoolImpl(_pool: string): Promise<PopulatedTransaction>;
    getLendingPoolCore(): Promise<PopulatedTransaction>;
    setLendingPoolCoreImpl(
      _lendingPoolCore: string
    ): Promise<PopulatedTransaction>;
    getLendingPoolConfigurator(): Promise<PopulatedTransaction>;
    setLendingPoolConfiguratorImpl(
      _configurator: string
    ): Promise<PopulatedTransaction>;
    getLendingPoolDataProvider(): Promise<PopulatedTransaction>;
    setLendingPoolDataProviderImpl(
      _provider: string
    ): Promise<PopulatedTransaction>;
    getLendingPoolParametersProvider(): Promise<PopulatedTransaction>;
    setLendingPoolParametersProvider(
      _parametersProvider: string
    ): Promise<PopulatedTransaction>;
    getFeeProvider(): Promise<PopulatedTransaction>;
    setFeeProviderImpl(_feeProvider: string): Promise<PopulatedTransaction>;
    getLendingPoolLiquidationManager(): Promise<PopulatedTransaction>;
    setLendingPoolLiquidationManager(
      _manager: string
    ): Promise<PopulatedTransaction>;
    getLendingPoolManager(): Promise<PopulatedTransaction>;
    setLendingPoolManager(
      _lendingPoolManager: string
    ): Promise<PopulatedTransaction>;
    getPriceOracle(): Promise<PopulatedTransaction>;
    setPriceOracle(_priceOracle: string): Promise<PopulatedTransaction>;
    getLendingRateOracle(): Promise<PopulatedTransaction>;
    setLendingRateOracle(
      _lendingRateOracle: string
    ): Promise<PopulatedTransaction>;
    getRewardManager(): Promise<PopulatedTransaction>;
    setRewardManager(_manager: string): Promise<PopulatedTransaction>;
    getLpRewardVault(): Promise<PopulatedTransaction>;
    setLpRewardVault(_address: string): Promise<PopulatedTransaction>;
    getGovRewardVault(): Promise<PopulatedTransaction>;
    setGovRewardVault(_address: string): Promise<PopulatedTransaction>;
    getSafetyRewardVault(): Promise<PopulatedTransaction>;
    setSafetyRewardVault(_address: string): Promise<PopulatedTransaction>;
    getStakingToken(): Promise<PopulatedTransaction>;
    setStakingToken(_address: string): Promise<PopulatedTransaction>;
  };
}
