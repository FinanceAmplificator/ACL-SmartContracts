/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FeeProviderInterface extends ethers.utils.Interface {
  functions: {
    "FEE_PROVIDER_REVISION()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "calculateLoanOriginationFee(uint256)": FunctionFragment;
    "calculateRewards(uint256)": FunctionFragment;
    "getFeeRates()": FunctionFragment;
    "getFlashLoanFee()": FunctionFragment;
    "getRewardRates()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_PROVIDER_REVISION",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateLoanOriginationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFeeRates", values?: void): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanFee",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "getRewardRates", values?: void): string;

  decodeFunctionResult(
    functionFragment: "FEE_PROVIDER_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateLoanOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardRates",
    data: BytesLike
  ): Result;

  events: {};
}

export class FeeProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeeProviderInterface;

  functions: {
    FEE_PROVIDER_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * initializes the FeeProvider after it's added to the proxy
     * @param _addressesProvider the address of the LendingPoolAddressesProvider
     */
    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * calculates the origination fee for every loan executed on the platform.
     * @param _amount the amount of the loan*
     */
    calculateLoanOriginationFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * returns the origination fee percentage*
     */
    calculateRewards(
      _originationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getFeeRates(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getFlashLoanFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRewardRates(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  FEE_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * initializes the FeeProvider after it's added to the proxy
   * @param _addressesProvider the address of the LendingPoolAddressesProvider
   */
  initialize(
    _addressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * calculates the origination fee for every loan executed on the platform.
   * @param _amount the amount of the loan*
   */
  calculateLoanOriginationFee(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * returns the origination fee percentage*
   */
  calculateRewards(
    _originationFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getFeeRates(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardRates(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  staticCall: {
    FEE_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * initializes the FeeProvider after it's added to the proxy
     * @param _addressesProvider the address of the LendingPoolAddressesProvider
     */
    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * calculates the origination fee for every loan executed on the platform.
     * @param _amount the amount of the loan*
     */
    calculateLoanOriginationFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * returns the origination fee percentage*
     */
    calculateRewards(
      _originationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getFeeRates(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardRates(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    FEE_PROVIDER_REVISION(): Promise<BigNumber>;
    initialize(_addressesProvider: string): Promise<BigNumber>;
    calculateLoanOriginationFee(_amount: BigNumberish): Promise<BigNumber>;
    calculateRewards(_originationFee: BigNumberish): Promise<BigNumber>;
    getFeeRates(): Promise<BigNumber>;
    getFlashLoanFee(): Promise<BigNumber>;
    getRewardRates(): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_PROVIDER_REVISION(): Promise<PopulatedTransaction>;
    initialize(_addressesProvider: string): Promise<PopulatedTransaction>;
    calculateLoanOriginationFee(
      _amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    calculateRewards(
      _originationFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    getFeeRates(): Promise<PopulatedTransaction>;
    getFlashLoanFee(): Promise<PopulatedTransaction>;
    getRewardRates(): Promise<PopulatedTransaction>;
  };
}
