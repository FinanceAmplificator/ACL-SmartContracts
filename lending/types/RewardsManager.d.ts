/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardsManagerInterface extends ethers.utils.Interface {
  functions: {
    "addressesProvider()": FunctionFragment;
    "coreAddress()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "lendingPoolAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPools(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "registerPools(address[])": FunctionFragment;
    "addRewardItem(address,uint256,uint256,uint256)": FunctionFragment;
    "updateRewards(address,address,uint256,uint256,uint256)": FunctionFragment;
    "updateReward(address,address,uint8,uint256,uint256)": FunctionFragment;
    "readRewards(address,address,uint8,uint256)": FunctionFragment;
    "resetReward(address,address,uint8)": FunctionFragment;
    "withdrawFromVault(uint8,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "coreAddress", values?: void): string;
  encodeFunctionData(functionFragment: "isOwner", values?: void): string;
  encodeFunctionData(
    functionFragment: "lendingPoolAddress",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: void): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "rewardPools", values: [string]): string;
  encodeFunctionData(functionFragment: "stakingToken", values?: void): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardItem",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readRewards",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class RewardsManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardsManagerInterface;

  functions: {
    addressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coreAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lendingPoolAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    rewardPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      nextRewardPtr: BigNumber;
      valid: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    stakingToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will register the reward pools based on an array of reserves
     * @param _reserves - Array of addresses Access Control: Only Lending Pools
     */
    registerPools(
      _reserves: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will add a new reward item.
     * @param _reserve - The reserve of the lending pool.
     * @param _shareGov - The stBMxx amount of the governance staker. Access Control: Only Lending Pools or Core
     * @param _sharesLp - The mxToken amount of the depositor.
     * @param _sharingLpBase - The total amount of the mxToken supply.
     */
    addRewardItem(
      _reserve: string,
      _sharesLp: BigNumberish,
      _sharingLpBase: BigNumberish,
      _shareGov: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will update both the Depositor and Governance reward of the user.
     * @param _num - The number of reward items to update. Input 0 to update all available reward items. Access Control: Only Lending Pools
     * @param _reserve - The reserve of the lending pool.
     * @param _sharesGov - The amount of stBMxx token the user has.
     * @param _sharesLp - The amount of the mxToken the user has.
     * @param _user - The user's address.
     */
    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Called by LendingPool to accumulate and update the reward for a user.
     * @param _num The number of reward items to update. Input 0 to update all available reward items. Access Control: Only Lending Pools*
     * @param _reserve The lending pool reserver.
     * @param _type The amount of reward.
     * @param _user The address of the user.
     */
    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will read the available reward of the user.
     * @param _reserve - The reserve of the lending pool.
     * @param _share - The amount of mxToken or stBMxx token, depending on the _type specified.
     * @param _type - The type of reward.
     * @param _user - The user's address.
     */
    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * This function will reset the user's accumulated reward to 0 and set the pointer to the pool's next reward.
     * @param _reserve - The reserve of the lending pool.
     * @param _type - The type of reward. Access Control: Only Lending Pools
     * @param _user - The user's address.
     */
    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * This function will withdraw the reward and send to the user.
     * @param _amount - The amount to pay. Access Control: Only Lending Pools
     * @param _to - The payee's address.
     * @param _token - The token to withdraw.
     * @param _type - The type of reward.
     */
    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  coreAddress(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  rewardPools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    nextRewardPtr: BigNumber;
    valid: boolean;
    0: BigNumber;
    1: boolean;
  }>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will register the reward pools based on an array of reserves
   * @param _reserves - Array of addresses Access Control: Only Lending Pools
   */
  registerPools(
    _reserves: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will add a new reward item.
   * @param _reserve - The reserve of the lending pool.
   * @param _shareGov - The stBMxx amount of the governance staker. Access Control: Only Lending Pools or Core
   * @param _sharesLp - The mxToken amount of the depositor.
   * @param _sharingLpBase - The total amount of the mxToken supply.
   */
  addRewardItem(
    _reserve: string,
    _sharesLp: BigNumberish,
    _sharingLpBase: BigNumberish,
    _shareGov: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will update both the Depositor and Governance reward of the user.
   * @param _num - The number of reward items to update. Input 0 to update all available reward items. Access Control: Only Lending Pools
   * @param _reserve - The reserve of the lending pool.
   * @param _sharesGov - The amount of stBMxx token the user has.
   * @param _sharesLp - The amount of the mxToken the user has.
   * @param _user - The user's address.
   */
  updateRewards(
    _reserve: string,
    _user: string,
    _sharesLp: BigNumberish,
    _sharesGov: BigNumberish,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Called by LendingPool to accumulate and update the reward for a user.
   * @param _num The number of reward items to update. Input 0 to update all available reward items. Access Control: Only Lending Pools*
   * @param _reserve The lending pool reserver.
   * @param _type The amount of reward.
   * @param _user The address of the user.
   */
  updateReward(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    _shares: BigNumberish,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will read the available reward of the user.
   * @param _reserve - The reserve of the lending pool.
   * @param _share - The amount of mxToken or stBMxx token, depending on the _type specified.
   * @param _type - The type of reward.
   * @param _user - The user's address.
   */
  readRewards(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * This function will reset the user's accumulated reward to 0 and set the pointer to the pool's next reward.
   * @param _reserve - The reserve of the lending pool.
   * @param _type - The type of reward. Access Control: Only Lending Pools
   * @param _user - The user's address.
   */
  resetReward(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * This function will withdraw the reward and send to the user.
   * @param _amount - The amount to pay. Access Control: Only Lending Pools
   * @param _to - The payee's address.
   * @param _token - The token to withdraw.
   * @param _type - The type of reward.
   */
  withdrawFromVault(
    _type: BigNumberish,
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    addressesProvider(overrides?: CallOverrides): Promise<string>;

    coreAddress(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<void>;

    rewardPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      nextRewardPtr: BigNumber;
      valid: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<void>;

    /**
     * This function will register the reward pools based on an array of reserves
     * @param _reserves - Array of addresses Access Control: Only Lending Pools
     */
    registerPools(_reserves: string[], overrides?: Overrides): Promise<void>;

    /**
     * This function will add a new reward item.
     * @param _reserve - The reserve of the lending pool.
     * @param _shareGov - The stBMxx amount of the governance staker. Access Control: Only Lending Pools or Core
     * @param _sharesLp - The mxToken amount of the depositor.
     * @param _sharingLpBase - The total amount of the mxToken supply.
     */
    addRewardItem(
      _reserve: string,
      _sharesLp: BigNumberish,
      _sharingLpBase: BigNumberish,
      _shareGov: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * This function will update both the Depositor and Governance reward of the user.
     * @param _num - The number of reward items to update. Input 0 to update all available reward items. Access Control: Only Lending Pools
     * @param _reserve - The reserve of the lending pool.
     * @param _sharesGov - The amount of stBMxx token the user has.
     * @param _sharesLp - The amount of the mxToken the user has.
     * @param _user - The user's address.
     */
    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * Called by LendingPool to accumulate and update the reward for a user.
     * @param _num The number of reward items to update. Input 0 to update all available reward items. Access Control: Only Lending Pools*
     * @param _reserve The lending pool reserver.
     * @param _type The amount of reward.
     * @param _user The address of the user.
     */
    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * This function will read the available reward of the user.
     * @param _reserve - The reserve of the lending pool.
     * @param _share - The amount of mxToken or stBMxx token, depending on the _type specified.
     * @param _type - The type of reward.
     * @param _user - The user's address.
     */
    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function will reset the user's accumulated reward to 0 and set the pointer to the pool's next reward.
     * @param _reserve - The reserve of the lending pool.
     * @param _type - The type of reward. Access Control: Only Lending Pools
     * @param _user - The user's address.
     */
    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * This function will withdraw the reward and send to the user.
     * @param _amount - The amount to pay. Access Control: Only Lending Pools
     * @param _to - The payee's address.
     * @param _token - The token to withdraw.
     * @param _type - The type of reward.
     */
    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addressesProvider(): Promise<BigNumber>;
    coreAddress(): Promise<BigNumber>;
    isOwner(): Promise<BigNumber>;
    lendingPoolAddress(): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    renounceOwnership(): Promise<BigNumber>;
    rewardPools(arg0: string): Promise<BigNumber>;
    stakingToken(): Promise<BigNumber>;
    transferOwnership(newOwner: string): Promise<BigNumber>;
    registerPools(_reserves: string[]): Promise<BigNumber>;
    addRewardItem(
      _reserve: string,
      _sharesLp: BigNumberish,
      _sharingLpBase: BigNumberish,
      _shareGov: BigNumberish
    ): Promise<BigNumber>;
    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish
    ): Promise<BigNumber>;
    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish
    ): Promise<BigNumber>;
    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish
    ): Promise<BigNumber>;
    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish
    ): Promise<BigNumber>;
    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressesProvider(): Promise<PopulatedTransaction>;
    coreAddress(): Promise<PopulatedTransaction>;
    isOwner(): Promise<PopulatedTransaction>;
    lendingPoolAddress(): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    renounceOwnership(): Promise<PopulatedTransaction>;
    rewardPools(arg0: string): Promise<PopulatedTransaction>;
    stakingToken(): Promise<PopulatedTransaction>;
    transferOwnership(newOwner: string): Promise<PopulatedTransaction>;
    registerPools(_reserves: string[]): Promise<PopulatedTransaction>;
    addRewardItem(
      _reserve: string,
      _sharesLp: BigNumberish,
      _sharingLpBase: BigNumberish,
      _shareGov: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish
    ): Promise<PopulatedTransaction>;
    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish
    ): Promise<PopulatedTransaction>;
    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish
    ): Promise<PopulatedTransaction>;
    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
